import numpy as np
import matplotlib.pyplot as plt 

data = np.array([[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
                [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
                [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
                [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
                [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
                [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
                [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
                [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
                [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
                [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
                [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
                [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
                [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
                [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
                [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
                [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1]])
L = 16
x,y = np.arange(1,L+1,1), np.arange(1,L+1,1)

# X,Y = np.meshgrid(x,y)
# plt.scatter(X,Y,s = 50, marker = 'o', c = data)
# plt.show()

# plt.imshow(data)
# plt.show()

data1 = np.array([[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
                [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
                [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
                [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
                [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
                [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
                [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
                [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
                [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
                [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
                [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
                [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
                [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
                [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
                [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
                [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]])

data2 = np.array([[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1], ### ANNNI 
                [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
                [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
                [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
                [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
                [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
                [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
                [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
                [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
                [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
                [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
                [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
                [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
                [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
                [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
                [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1]])


data3 = np.array([[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],\
                [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],\
                [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],\
                [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],\
                [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],\
                [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],\
                [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],\
                [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],\
                [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],\
                [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],\
                [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],\
                [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],\
                [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],\
                [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],\
                [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],\
                [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]])

### ending with q = 3/16
data4 = np.array([[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],\
            [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],\
            [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],\
            [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],\
            [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],\
            [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],\
            [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],\
            [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],\
            [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],\
            [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],\
            [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],\
            [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],\
            [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],\
            [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],\
            [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],\
            [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]])


data5 = np.array([[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1], ### kappa = 0.6, beta = 0.6
[-1,-1,1,1,1,1,1,1,1,1,1,1,1,1,1,-1],\
[1,1,1,1,1,1,1,1,1,-1,-1,-1,1,1,1,1],\
[1,1,1,1,1,1,1,-1,-1,-1,-1,-1,-1,-1,1,1],\
[1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1,1],\
[-1,-1,-1,-1,-1,-1,-1,-1,1,1,1,1,1,1,-1,-1],\
[-1,-1,-1,1,1,-1,-1,-1,1,1,1,1,1,1,-1,-1],\
[1,-1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],\
[1,-1,-1,-1,1,1,1,1,1,-1,1,1,1,1,1,1],\
[1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1,-1,-1,-1],\
[-1,-1,1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],\
[-1,-1,1,1,1,1,-1,-1,-1,1,1,-1,-1,-1,-1,-1],\
[1,1,1,1,1,1,1,1,1,1,1,1,-1,-1,-1,1],\
[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],\
[1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1,1,1],\
[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1]])


data6 = np.array([[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1], ### kappa = 0.6, beta = 0.9
        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],\
        [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1],\
        [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],\
        [-1,-1,1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],\
        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],\
        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],\
        [1,1,1,1,1,1,1,1,-1,-1,1,-1,-1,1,1,1],\
        [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],\
        [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],\
        [-1,-1,-1,-1,-1,-1,-1,-1,-1,1,-1,-1,-1,-1,-1,-1],\
        [1,1,1,1,-1,-1,-1,1,1,1,1,1,1,1,1,1],\
        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],\
        [1,1,1,1,1,1,1,1,-1,-1,-1,-1,-1,-1,-1,1],\
        [1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],\
        [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1,-1,-1]])
L = 16
x,y = np.arange(1,L+1,1), np.arange(1,L+1,1)

data7 = np.array([[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],\
        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],\
        [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],\
        [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],\
        [1,1,1,1,-1,-1,-1,-1,-1,-1,-1,1,1,1,1,1],\
        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],\
        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],\
        [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],\
        [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],\
        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],\
        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],\
        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],\
        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],\
        [1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1],\
        [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],\
        [-1,-1,1,1,1,1,1,1,1,1,1,1,1,1,1,-1]])

data8 = np.array([[-1,-1,-1,1,1,-1,-1,1,1,-1,1,1,1,1,1,-1],\
[1,-1,-1,1,-1,-1,-1,1,1,1,1,1,1,1,-1,1],\
[1,1,1,1,1,1,-1,-1,1,1,-1,-1,-1,-1,-1,-1],\
[-1,-1,-1,1,1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1],\
[-1,1,-1,-1,1,1,-1,-1,-1,-1,-1,-1,1,1,1,1],\
[1,1,-1,-1,1,1,-1,1,1,1,1,-1,-1,1,1,1],\
[1,1,1,1,-1,1,1,-1,1,1,1,-1,-1,-1,-1,-1],\
[-1,-1,1,1,-1,-1,-1,1,1,-1,-1,-1,-1,-1,-1,1],\
[-1,-1,1,1,1,1,1,1,1,1,1,1,-1,-1,-1,-1],\
[-1,-1,1,1,1,1,1,1,1,-1,1,1,-1,-1,1,-1],\
[1,-1,1,1,1,1,1,-1,-1,-1,-1,-1,-1,-1,-1,1],\
[1,1,-1,1,-1,1,1,-1,1,-1,-1,-1,-1,-1,-1,1],\
[1,-1,-1,1,-1,-1,1,1,1,1,1,1,1,1,1,-1],\
[-1,-1,-1,1,1,-1,-1,-1,1,1,1,1,1,1,1,-1],\
[1,1,-1,-1,1,1,-1,-1,-1,1,1,-1,-1,1,-1,1],\
[1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1,-1,-1]])

data9 = np.array([[1,1,1,1,1,1,-1,1,-1,-1,1,-1,1,1,1,1],\
[1,1,-1,1,1,-1,-1,-1,-1,-1,1,1,1,1,-1,1],\
[-1,-1,-1,1,-1,-1,1,1,-1,-1,-1,1,-1,-1,1,-1],\
[-1,-1,-1,-1,-1,-1,1,1,1,-1,-1,-1,1,-1,-1,-1],\
[-1,-1,1,-1,-1,-1,-1,1,1,1,1,1,1,1,-1,-1],\
[1,-1,1,1,1,1,1,-1,-1,-1,1,1,1,1,1,1],\
[1,1,1,1,-1,-1,-1,-1,1,1,-1,-1,1,-1,1,-1],\
[-1,1,1,1,-1,1,-1,1,1,1,1,1,1,-1,-1,1],\
[1,-1,-1,1,-1,1,1,1,-1,1,1,1,1,-1,-1,-1],\
[-1,1,-1,-1,-1,-1,1,1,-1,-1,1,-1,1,-1,1,1],\
[1,-1,-1,-1,1,1,1,1,-1,-1,-1,-1,1,-1,-1,-1],\
[1,1,-1,-1,-1,1,1,-1,1,1,1,-1,1,1,-1,1],\
[1,1,1,-1,-1,-1,-1,-1,1,1,1,-1,-1,-1,1,-1],\
[-1,1,1,1,1,-1,-1,1,-1,-1,-1,-1,1,-1,-1,-1],\
[1,1,-1,-1,1,1,1,1,-1,-1,1,1,1,1,-1,-1],\
[1,-1,-1,1,1,1,-1,1,1,-1,1,1,1,-1,1,-1]])

data10 = np.array([[-1,-1,1,-1,-1,-1,1,-1,1,1,1,-1,1,1,1,1],\
[1,-1,1,1,-1,1,1,-1,-1,-1,1,-1,-1,-1,-1,-1],\
[-1,1,-1,-1,-1,1,1,1,1,1,-1,1,1,1,1,-1],\
[1,1,-1,-1,1,1,-1,1,-1,1,1,1,-1,-1,-1,-1],\
[1,-1,-1,-1,-1,1,-1,1,1,1,-1,1,1,-1,1,-1],\
[-1,1,1,1,1,-1,1,1,1,-1,-1,1,1,-1,-1,1],\
[1,1,1,-1,1,1,1,-1,-1,1,-1,-1,1,1,1,-1],\
[-1,1,-1,-1,-1,1,1,1,-1,-1,1,1,1,1,1,-1],\
[1,1,-1,-1,1,-1,1,1,1,-1,1,1,-1,-1,1,-1],\
[-1,-1,-1,1,1,1,-1,-1,-1,1,-1,-1,1,-1,1,-1],\
[-1,1,-1,1,1,1,-1,1,1,1,1,1,1,-1,-1,-1],\
[-1,-1,1,1,1,-1,-1,1,-1,-1,-1,1,1,-1,1,-1],\
[1,-1,1,1,1,-1,1,-1,1,1,-1,-1,1,1,1,1],\
[-1,1,1,1,1,1,1,-1,1,-1,-1,-1,-1,1,-1,-1],\
[-1,-1,1,1,1,-1,-1,1,-1,-1,-1,1,-1,1,1,1],\
[1,1,-1,-1,1,1,-1,1,1,1,1,1,1,-1,-1,-1]])


X,Y = np.meshgrid(x,y)
fig,ax = plt.subplots(1,2)

X,Y = np.meshgrid(x,y)
# Create the plot
fig, ax = plt.subplots(figsize=(5, 5))
cmap = plt.cm.binary  # Black and white colormap
# ax.imshow(grid, cmap=cmap, extent=[0, 16, 0, 16], origin='upper')
grid = data4



# Add "+" and "-" symbols
for i in range(grid.shape[0]):  # Loop over rows
    for j in range(grid.shape[1]):  # Loop over columns
        symbol = "⊕" if grid[i, j] == 1 else "⊖"
        ax.text(j + 0.5, 15.5 - i, symbol, ha='center', va='center',
                fontsize=16, color="red" if symbol == "⊕" else "blue")


# Adjust axis properties
ax.set_xticks(np.arange(0, 17, 1))  # Add grid ticks
ax.set_yticks(np.arange(0, 17, 1))
ax.set_xticklabels([])  # Remove tick labels
ax.set_yticklabels([])
ax.tick_params(left=False, right=False, top=False, bottom=False, labelleft=False, labelbottom=False)
# ax.grid(color='gray', linestyle='--', linewidth=0.5)  # Add gridlines
ax.set_xlim(0, 16)
ax.set_ylim(0, 16)

# Title and show plot
# ax.set_title("Ground State Visualization (16x16 Grid)", fontsize=16)
descriptor = "inter1"
plt.savefig(f"/Users/shanekeiser/Documents/ANNNI/figures/L-16_ground-state_{descriptor}", dpi=300)
plt.show()

# from scipy.interpolate import make_interp_spline
# pos = np.arange(-1,17,1)
# x_s = np.array([1,-1,-1,1,1,-1,-1,1,1,-1,-1,1,1,-1,-1,1,1,-1])
# pos_model = np.linspace(-1,16,1000)
# x_interp = make_interp_spline(pos, x_s, k = 3)
# x_model = x_interp(pos_model)
# colormap = np.array(['b','g','r'])
# plt.scatter(pos,x_s, marker = 'X', c = colormap[x_s+1])
# plt.vlines(x = [-0.5,15.5],ymin = -2, ymax = 2, color = "black", linestyle = "--", alpha = 0.5)
# plt.plot(pos_model, x_model, color = 'black')
# plt.ylim(-2,2)
# plt.yticks([-1,1])
# plt.xticks([0,4,8,12,16], labels = ['0','4','8','12','0'])
# plt.text(x = -1, y = -1.85, s = "Periodic BCs", rotation = 90)
# plt.show()